<?php
session_start();

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "food_recommend_system";

$conn = new mysqli($servername, $username, $password, $dbname);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
if (!isset($_SESSION['username'])) {
    header("Location: loginform.php");
    exit();
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
$username = $_SESSION['username']; // Get the username from session

// üî• JOIN users ‡∏Å‡∏±‡∏ö health_profile ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ user_id
$sql = "SELECT u.email, p.daily_calorie, p.age, p.gender, p.weight, p.height, p.activity_level, p.bmi, p.status_bmi, p.diseases
        FROM users u 
        JOIN profiles p ON u.users_id = p.users_id 
        WHERE u.username = ?";

$stmt = $conn->prepare($sql);
$stmt->bind_param("s", $username);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $_SESSION['email'] = $row['email'];  // Set email in session
    $daily_calorie = $row['daily_calorie'];
    $age = $row['age'];
    $gender = $row['gender'];
    $weight = $row['weight'];
    $height = $row['height'];
    $activity_level = $row['activity_level'];
    $bmi = $row['bmi'];
    $status_bmi = $row['status_bmi'];
    $diseases = $row['diseases'];
} else {
    $daily_calorie = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $age = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $gender = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $weight = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $height = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $activity_level = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $bmi = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $status_bmi = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    $diseases = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
}

// ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
$stmt->close();
$conn->close();
?>

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RecommendFood</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"/>
    <link rel="stylesheet" href="css/recommendfood.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>const loggedInUser = "<?php echo $username; ?>"; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà JavaScript</script>
</head>
<body>
    <div class="container">
        <button id="sidebarToggle" aria-label="Toggle sidebar">
            <i class="fas fa-bars"></i>
        </button>
        <!-- ‡πÄ‡πÄ‡∏ñ‡∏ö‡∏ö‡∏≤‡∏£‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á -->
        <div class="bar flex-column p-0" style="width: 310px; height: auto;">
            <div class="text-center py-4">
                <i class="fa-solid fa-circle-user fs-1"></i>
                <div class="fs-4 mt-2" style="font-size: 25px; font-weight:bold;"><?php echo htmlspecialchars($_SESSION['username']);?></div>
            </div>
            <!-- ‡πÄ‡∏°‡∏ô‡∏π -->
            <ul class="nav nav-pills flex-column px-0">
                <li class="nav-item mb-3">
                    <a href="index.php" class="nav-link link-body-emphasis custom-nav">
                        <i class="fa-solid fa-house"></i>&nbsp;&nbsp;&nbsp;&nbsp;‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    </a>
                </li>
                <li class="mb-3">
                    <a href="recommendfood.php" class="nav-link active custom-nav">
                        <i class="fa-solid fa-bowl-food"></i>&nbsp;&nbsp;&nbsp;&nbsp;‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    </a>
                </li>
                <li class="mb-3">
                    <a href="calendar.php" class="nav-link link-body-emphasis custom-nav">
                        <i class="fa-regular fa-calendar"></i>&nbsp;&nbsp;&nbsp;&nbsp;‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    </a>
                </li>
                <li class="mb-3">
                    <a href="profile.php" class="nav-link link-body-emphasis custom-nav">
                        <i class="fa-regular fa-circle-user"></i>&nbsp;&nbsp;&nbsp;&nbsp;‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                    </a>
                </li>
            </ul>
            <li class="mt-auto text-center ">
                <a href="loginform.php" class="nav-link link-body-emphasis custom-nav">
                    <i class="fa-solid fa-arrow-right-from-bracket"></i>&nbsp;&nbsp;‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                </a>
            </li>
        </div>


        <div class="content">
            <!-- ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ -->
            <div class="boxtop">
                <h1 id="daily_calories">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ <span id="total-calories">0</span> ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</h1>
                <button class="get-recommendations-btn">‡πÄ‡πÄ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£</button>
            </div>
            <br>
            <div class="calendar-container">
                <div class="control-button" id="prevBtn"><i class="fa-solid fa-chevron-left"></i></div>
                <div class="calendar-slider" id="calendarSlider">
                    <!-- Calendar week will be generated here -->
                </div>
                <div class="control-button" id="nextBtn"><i class="fa-solid fa-chevron-right"></i></div>
            </div>
            <!-- calendar-container -->
            <br>
    
            <div id="recommendedFoods" class="meals-container">
                <!-- ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -->
            </div>

            <!-- Submit Button -->
            <button class="submit-btn">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button class="edit-btn" style="display:none;">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                
            
             

        </div>
        <!-- content -->
    </div>
    <!-- container -->






<script>
    // --- Sidebar Toggle JavaScript ---
        document.addEventListener('DOMContentLoaded', function() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.querySelector('.bar');

            if (sidebarToggle && sidebar) {
                sidebarToggle.addEventListener('click', function() {
                    sidebar.classList.toggle('open');
                    const icon = sidebarToggle.querySelector('i');
                    if (sidebar.classList.contains('open')) {
                        icon.classList.remove('fa-bars');
                        icon.classList.add('fa-times');
                    } else {
                        icon.classList.remove('fa-times');
                        icon.classList.add('fa-bars');
                    }
                });

                // Close sidebar if clicking outside on mobile/tablet
                document.addEventListener('click', function(event) {
                    if (window.innerWidth <= 992 && sidebar.classList.contains('open')) {
                        const isClickInsideSidebar = sidebar.contains(event.target);
                        const isClickOnToggler = sidebarToggle.contains(event.target);

                        if (!isClickInsideSidebar && !isClickOnToggler) {
                            sidebar.classList.remove('open');
                            const icon = sidebarToggle.querySelector('i');
                            icon.classList.remove('fa-times');
                            icon.classList.add('fa-bars');
                        }
                    }
                });
            }
        });
        // --- End Sidebar Toggle JavaScript ---
    
// ========================================================================================================================
        // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
        document.addEventListener('DOMContentLoaded', function() {
        const calendarSlider = document.getElementById('calendarSlider');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        let currentDate = new Date();
        let currentWeekStart = new Date(currentDate);
        currentWeekStart.setDate(currentDate.getDate() - currentDate.getDay()); // Start from Sunday
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
        function renderWeek(startDate) {
            const calendar = document.createElement('div');
            calendar.classList.add('calendar');

            const days = document.createElement('div');
            days.classList.add('days');
            ['‡∏≠‡∏≤', '‡∏à', '‡∏≠', '‡∏û', '‡∏û‡∏§', '‡∏®', '‡∏™'].forEach(day => {
                const dayElement = document.createElement('div');
                dayElement.classList.add('day');
                dayElement.textContent = day;
                days.appendChild(dayElement);
            });
            calendar.appendChild(days);

            const dates = document.createElement('div');
            dates.classList.add('dates');

            for (let i = 0; i < 7; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                const dateElement = document.createElement('div');
                dateElement.classList.add('date');
                dateElement.textContent = date.getDate();
                dateElement.setAttribute('data-date', date.toISOString().split('T')[0]); // Add data-date attribute

                if (date.toDateString() === currentDate.toDateString()) {
                    dateElement.classList.add('today');
                }

                dateElement.addEventListener('click', function() {
                    document.querySelectorAll('.date').forEach(el => el.classList.remove('selected-day', 'today'));
                    dateElement.classList.add('selected-day');
                    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    currentDate = new Date(this.getAttribute('data-date'));
                    
                    loadFoodDataForSelectedDate(currentDate);
                });
                
                dates.appendChild(dateElement);
            }

            calendar.appendChild(dates);
            calendarSlider.innerHTML = '';
            calendarSlider.appendChild(calendar);
            
            // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏™‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            highlightSelectedDate();
        }

        prevBtn.addEventListener('click', () => {
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏´‡∏°‡πà ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            currentDate = new Date(currentWeekStart);
            renderWeek(currentWeekStart);
            loadFoodDataForSelectedDate(currentDate);
        });

        nextBtn.addEventListener('click', () => {
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏´‡∏°‡πà ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            currentDate = new Date(currentWeekStart);
            renderWeek(currentWeekStart);
            loadFoodDataForSelectedDate(currentDate);
        });
        
        function highlightSelectedDate() {
            const selectedDate = currentDate.toISOString().split('T')[0];
            const dateElements = document.querySelectorAll('.date');
            dateElements.forEach(dateElement => {
                if (dateElement.getAttribute('data-date') === selectedDate) {
                    dateElement.classList.add('selected-day');
                }
            });
        }

        renderWeek(currentWeekStart);
        highlightSelectedDate();
    });

// ========================================================================================================================
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (Event Delegation)
    function handleFoodCardClick(event) {
        const foodCard = event.target.closest('.food-card'); // ‡∏´‡∏≤ element .food-card ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô popup
        const isDeleteButton = event.target.closest('.delete-food-btn');
        const isAddButtonInPopup = event.target.closest('.food-selection-popup .add-food');

        if (foodCard && !isDeleteButton && !isAddButtonInPopup) {
            const foodId = foodCard.dataset.foodId; // ‡∏î‡∏∂‡∏á food_id ‡∏à‡∏≤‡∏Å data attribute
            if (foodId && !foodId.startsWith('temp-')) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ foodId ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà temporary id
                console.log("Clicked Food ID:", foodId);
                fetchAndShowFoodDetails(foodId);
            } else if (foodId.startsWith('temp-')) {
                 console.log("Clicked temporary food card, no details available.");
                 // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
            } else {
                console.log("Food ID not found on clicked card.");
            }
        }
    }

    // ========================================================================================================================
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Popup 
    async function fetchAndShowFoodDetails(foodId) {
        // ‡πÅ‡∏™‡∏î‡∏á loading indicator (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        showLoadingPopup();

        try {
            const response = await fetch('http://localhost:5000/get_food_details', { 
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                // ‡∏™‡πà‡∏á food_id ‡πÑ‡∏õ‡πÉ‡∏ô body
                body: JSON.stringify({ food_id: foodId })
            });

            // ‡∏ã‡πà‡∏≠‡∏ô loading indicator
            hideLoadingPopup();

            if (response.ok) {
                const data = await response.json();
                if (data.success && data.food_details) {
                    displayFoodDetailsPopup(data.food_details);
                } else {
                    console.error('Error fetching food details:', data.error || 'Unknown error');
                    alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ: ' + (data.error || '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'));
                }
            } else {
                console.error('Error fetching food details: Server responded with status', response.status);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
            }
        } catch (error) {
            // ‡∏ã‡πà‡∏≠‡∏ô loading indicator
            hideLoadingPopup();
            console.error('Error fetching food details:', error);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ' + error.message);
        }
    }

    // ========================================================================================================================
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Popup ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 
    function displayFoodDetailsPopup(foodDetails) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á overlay
        const overlay = document.createElement('div');
        overlay.className = 'popup2-overlay food-details-overlay'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° class ‡πÄ‡∏â‡∏û‡∏≤‡∏∞

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup container
        const popup = document.createElement('div');
        popup.className = 'food-details-popup';

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Popup 
        popup.innerHTML = `
            <div class="popup-header">
                <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£</h3>
                <button class="close-popup-btn"><i class="fa-solid fa-rectangle-xmark"></i></button>
            </div>
            <div class="popup-content">
                <img src="${foodDetails.image_url || 'img/default-food.png'}" alt="${foodDetails.food_name || '‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£'}" class="popup-food-image">
                <h4 class="popup-food-name">${foodDetails.food_name || '‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£'} <p>${foodDetails.amount || '1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ'}</p></h4>
                <ul class="nutrition-list">
                    <li><i class="fa-solid fa-fire"></i> ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: <strong>${foodDetails.calories !== undefined ? foodDetails.calories.toFixed(0) : 'N/A'}</strong>&nbsp; ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</li>
                    <li><i class="fa-solid fa-drumstick-bite"></i> ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: <strong>${foodDetails.protein !== undefined ? foodDetails.protein.toFixed(1) : 'N/A'}</strong>&nbsp; ‡∏Å‡∏£‡∏±‡∏°</li>
                    <li><i class="fa-solid fa-bread-slice"></i> ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï: <strong>${foodDetails.carbohydrate !== undefined ? foodDetails.carbohydrate.toFixed(1) : 'N/A'}</strong>&nbsp; ‡∏Å‡∏£‡∏±‡∏°</li>
                    <li><i class="fa-solid fa-bacon"></i> ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: <strong>${foodDetails.fat !== undefined ? foodDetails.fat.toFixed(1) : 'N/A'}</strong>&nbsp; ‡∏Å‡∏£‡∏±‡∏°</li>
                    <li><i class="fa-solid fa-candy-cane"></i> ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•: <strong>${foodDetails.sugar !== undefined ? foodDetails.sugar.toFixed(1) : 'N/A'}</strong>&nbsp; ‡∏Å‡∏£‡∏±‡∏°</li>
                    <li><i class="fa-solid fa-mortar-pestle"></i> ‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°: <strong>${foodDetails.sodium !== undefined ? foodDetails.sodium.toFixed(0) : 'N/A'}</strong>&nbsp; ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏°</li>
                    <!-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô, ‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏ -->
                    ${foodDetails.vitamins ? `<li><i class="fa-solid fa-pills"></i> ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô: ${foodDetails.vitamins}</li>` : ''}
                    ${foodDetails.minerals ? `<li><i class="fa-solid fa-gem"></i> ‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏: ${foodDetails.minerals}</li>` : ''}
                </ul>
                ${foodDetails.description ? `<p class="food-description">${foodDetails.description}</p>` : ''}
            </div>
        `;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° popup ‡πÑ‡∏õ‡∏¢‡∏±‡∏á DOM
        overlay.appendChild(popup);
        document.body.appendChild(overlay);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
        const closeButtons = overlay.querySelectorAll('.close-popup-btn, .close-popup-btn-footer');
        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
            });
        });

        // ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å popup
        overlay.addEventListener('click', function(event) {
            if (event.target === overlay) {
                 if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
            }
        });
    }

    // ========================================================================================================================
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Loading (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ) 
    function showLoadingPopup() {
        const existingLoading = document.querySelector('.loading-overlay');
        if (existingLoading) return; 

        const overlay = document.createElement('div');
        overlay.className = 'popup-overlay loading-overlay';
        overlay.innerHTML = '<div class="loading-spinner"><div></div><div></div><div></div><div></div></div>'; // Spinner CSS
        document.body.appendChild(overlay);
    }

    function hideLoadingPopup() {
        const overlay = document.querySelector('.loading-overlay');
        if (overlay && document.body.contains(overlay)) {
            document.body.removeChild(overlay);
        }
    }



// ========================================================================================================================
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        function loadFoodDataForSelectedDate(selectedDate) {
            const formattedDate = selectedDate.toISOString().split('T')[0]; // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
            const username = loggedInUser;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            checkSavedMeals(username, formattedDate)
                .then(hasSavedMeals => {
                    if (hasSavedMeals) {
                        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        getSavedMeals(username, formattedDate);
                        hideRecommendationButton(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                        showEditButton(); // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        hideAddFoodButton(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                        hideDeleteFoodButton(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    } else {
                        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÄ‡∏õ‡∏•‡πà‡∏≤
                        displayMealSections();
                        showRecommendationButton(); 
                        hideEditButton(); 
                        showSubmitButton(); 
                        showAddFoodButton(); 
                    }
                })
                .catch(error => {
                    console.error('Error checking saved meals:', error);
                    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÄ‡∏õ‡∏•‡πà‡∏≤
                    displayMealSections();
                    showRecommendationButton(); // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                    hideEditButton(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    showSubmitButton(); // ‡πÄ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    showAddFoodButton(); // ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                });
        }

// ========================================================================================================================       
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠
        function displayMealSections() {
            const recommendedFoodsDiv = document.getElementById('recommendedFoods');
            recommendedFoodsDiv.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°

            const mealNames = ['breakfast', 'lunch', 'dinner'];
            const mealTranslation = {
                'breakfast': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤',
                'lunch': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
                'dinner': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô'
            };

            mealNames.forEach(mealName => {
                const mealSection = document.createElement('div');
                mealSection.classList.add('meal-section');
                mealSection.setAttribute('data-meal-type', mealName);

                const mealHeader = document.createElement('div');
                mealHeader.classList.add('meal-header');
                mealHeader.innerHTML = `
                    <h3>${mealTranslation[mealName]}</h3>
                    <span class="meal-calories">0 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</span>
                    <button class="add-food-btn" data-meal-type="${mealName}"><i class="fa-solid fa-plus"></i></button>
                `;

                const mealBody = document.createElement('div');
                mealBody.classList.add('meal-body', 'empty-meal');
                mealBody.textContent = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£';

                mealSection.appendChild(mealHeader);
                mealSection.appendChild(mealBody);
                recommendedFoodsDiv.appendChild(mealSection);
            });

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            addFoodButtonListeners();
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            resetTotalCalories();
        }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        function resetTotalCalories() {
            const totalCaloriesElement = document.getElementById('total-calories');
            if (totalCaloriesElement) {
                totalCaloriesElement.textContent = '0';
            }
        }

// ========================================================================================================================
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        async function checkSavedMeals(username, date) {
            try {
                const response = await fetch('http://localhost:5000/check_saved_meals', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username: username, date: date })
                });

                if (response.ok) {
                    const data = await response.json();
                    return data.has_meals; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                } else {
                    throw new Error('Error checking saved meals');
                }
            } catch (error) {
                console.error('Error checking saved meals:', error);
                return false; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            }
        }

// ========================================================================================================================
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        async function getSavedMeals(username, date) {
            try {
                const response = await fetch('http://localhost:5000/get_saved_meals', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username: username, date: date })
                });

                if (response.ok) {
                    const data = await response.json();
                    displaySavedMeals(data);
                } else {
                    throw new Error('Error fetching saved meals');
                }
            } catch (error) {
                console.error('Error fetching saved meals:', error);
                document.getElementById('recommendedFoods').innerHTML = `<div class="error-message"><p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}</p></div>`;
            }
        }

// ========================================================================================================================
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        function displaySavedMeals(data) {
            console.log('Saved meals data:', data);
            let totalDailyCalories = 0;
            let mealsHTML = '';
            const meals = data.meals;

            const orderedMealNames = ['breakfast', 'lunch', 'dinner'];
            const mealTranslation = {
                'breakfast': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤',
                'lunch': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
                'dinner': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô'
            };

            orderedMealNames.forEach(mealName => {
                if (meals.hasOwnProperty(mealName)) {
                    const meal = meals[mealName];
                    const translatedMealName = mealTranslation[mealName];

                    if (meal && meal.length > 0) {
                        let totalMealCalories = 0;
                        let mealItemsHTML = '';

                        meal.forEach(food => {
                            mealItemsHTML += `
                                <div class="food-card" data-food-id="${food.food_id || 'temp-' + Date.now()}" data-calories="${food.calories}">
                                    <button class="delete-food-btn" style="display:none;"><i class="fa-solid fa-trash"></i></button>
                                    <img src="${food.image_url || 'default-image.jpg'}" class="food-image" alt="${food.food_name}">
                                    <div class="food-info">
                                        <h4 class="food-name">${food.food_name}</h4>
                                        <p class="food-calories">${food.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</p>
                                        <p class="food-nutrients">
                                            üî• ${food.calories} | ü•© ${food.protein}g | üçû ${food.carbohydrate}g 
                                        </p>
                                        <div class="food-actions">
                                            <span class="food-name">${food.food_name}</span>
                                            <span class="food-amount">${food.amount || '1 ‡∏à‡∏≤‡∏ô'}</span>
                                        </div>
                                    </div>
                                </div>
                            `;
                            totalMealCalories += parseFloat(food.calories);
                        });

                        totalDailyCalories += totalMealCalories;

                        mealsHTML += `
                            <div class="meal-section" data-meal-type="${mealName}">
                                <div class="meal-header">
                                    <h3>${translatedMealName}</h3>
                                    <span class="meal-calories">${totalMealCalories.toFixed(0)} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</span>
                                    <button class="add-food-btn" data-meal-type="${mealName}" style="display:none;"><i class="fa-solid fa-plus"></i></button>
                                </div>
                                <div class="meal-body">${mealItemsHTML}</div>
                            </div>
                        `;
                    } else {
                        mealsHTML += `
                            <div class="meal-section" data-meal-type="${mealName}">
                                <div class="meal-header">
                                    <h3>${translatedMealName}</h3>
                                    <span class="meal-calories">0 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</span>
                                    <button class="add-food-btn" data-meal-type="${mealName}" style="display:none;"><i class="fa-solid fa-plus"></i></button>
                                </div>
                                <div class="meal-body empty-meal">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>
                            </div>
                        `;
                    }
                }
            });

            document.getElementById('total-calories').textContent = totalDailyCalories.toFixed(0);
            document.getElementById('recommendedFoods').innerHTML = mealsHTML;
            
            hideAddFoodButton(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            hideDeleteFoodButton(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            showEditButton(); // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            addDeleteFoodListeners(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            addFoodButtonListeners(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        function hideSubmitButton() {
            const submitButton = document.querySelector('.submit-btn');
            if (submitButton) {
                submitButton.style.display = 'none';
            }
        }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        function showEditButton() {
            const editButton = document.querySelector('.edit-btn');
            if (editButton) {
                editButton.style.display = 'block';
            }
            hideSubmitButton();
        }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        function hideEditButton() {
            const editButton = document.querySelector('.edit-btn');
            if (editButton) {
                editButton.style.display = 'none';
            }
        }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        function showSubmitButton() {
            const submitButton = document.querySelector('.submit-btn');
            if (submitButton) {
                submitButton.style.display = 'block';
            }
            showAddFoodButton(); // ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            showDeleteFoodButton(); // ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            hideEditButton(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        }
        document.addEventListener("DOMContentLoaded", function () {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡πÄ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            document.querySelector(".get-recommendations-btn").addEventListener("click", function () {
                getFoodRecommendations(loggedInUser);
            });
            document.querySelector(".edit-btn").addEventListener("click", function () {
                showSubmitButton();
            });
        });

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function showAddFoodButton() {
            const addFoodButtons = document.querySelectorAll('.add-food-btn');
            addFoodButtons.forEach(button => {
                button.style.display = 'block';
            });
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function hideAddFoodButton() {
            const addFoodButtons = document.querySelectorAll('.add-food-btn');
            addFoodButtons.forEach(button => {
                button.style.display = 'none';
            });
        }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function showDeleteFoodButton() {
            const deleteFoodButtons = document.querySelectorAll('.delete-food-btn');
            deleteFoodButtons.forEach(button => {
                button.style.display = 'block';
            });
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function hideDeleteFoodButton() {
            const deleteFoodButtons = document.querySelectorAll('.delete-food-btn');
            deleteFoodButtons.forEach(button => {
                button.style.display = 'none';
            });
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        const recommendedFoodsContainer = document.getElementById('recommendedFoods');
        if (recommendedFoodsContainer) {
            recommendedFoodsContainer.addEventListener('click', handleFoodCardClick);
        }

        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏õ‡∏¥‡∏î
        window.onload = function () {
            if (loggedInUser) {
                // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                loadFoodDataForSelectedDate(new Date());
            } else {
                console.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');
            }
        };


// ========================================================================================================================
         // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å API
         async function getFoodRecommendations(username) {
            try {
                const response = await fetch('http://localhost:5000/get_recommendations', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username: username })
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Data received:', data); // Debugging log

                    let totalDailyCalories = 0;
                    const meals = data.meals;
                    let mealsHTML = '';

                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    const orderedMealNames = ['breakfast', 'lunch', 'dinner'];
                    const mealTranslation = {
                        'breakfast': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤',
                        'lunch': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
                        'dinner': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô'
                    };

                    orderedMealNames.forEach(mealName => {
                        if (meals.hasOwnProperty(mealName)) { // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô API
                            const meal = meals[mealName];
                            const translatedMealName = mealTranslation[mealName];

                            if (meal && Object.keys(meal).length > 0) {
                                let totalMealCalories = 0;
                                let mealItemsHTML = '';

                                Object.values(meal).forEach(food => {
                                    mealItemsHTML += `
                                        <div class="food-card" data-food-id="${food.food_id || 'temp-' + Date.now()}" data-calories="${food.calories}">
                                            <button class="delete-food-btn"><i class="fa-solid fa-trash"></i></button>
                                            <img src="${food.image_url || 'default-image.jpg'}" class="food-image" alt="${food.food_name}">
                                            <div class="food-info">
                                                <h4 class="food-name">${food.food_name}</h4>
                                                <p class="food-calories">${food.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</p>
                                                <p class="food-nutrients">
                                                    üî• ${food.calories} | ü•© ${food.protein}g | üçû ${food.carbohydrate}g
                                                </p>
                                                <div class="food-actions">
                                                    <span class="food-name">${food.food_name}</span>
                                                    <span class="food-amount">${food.amount || '1 ‡∏à‡∏≤‡∏ô'}</span>
                                                </div>
                                            </div>
                                        </div>
                                    `;


                                    totalMealCalories += parseFloat(food.calories);
                                });

                                totalDailyCalories += totalMealCalories;

                                mealsHTML += `
                                    <div class="meal-section" data-meal-type="${mealName}">
                                        <div class="meal-header">
                                            <h3>${translatedMealName}</h3>
                                            <span class="meal-calories">${totalMealCalories.toFixed(0)} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</span>
                                            <button class="add-food-btn" data-meal-type="${mealName}"><i class="fa-solid fa-plus"></i></button>
                                        </div>
                                        <div class="meal-body">${mealItemsHTML}</div>
                                    </div>
                                `;
                            } else {
                                mealsHTML += `
                                    <div class="meal-section" data-meal-type="${mealName}">
                                        <div class="meal-header">
                                            <h3>${translatedMealName}</h3>
                                            <span class="meal-calories">0 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</span>
                                            <button class="add-food-btn" data-meal-type="${mealName}"><i class="fa-solid fa-plus"></i></button>
                                        </div>
                                        <div class="meal-body empty-meal">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>
                                    </div>
                                `;
                            }
                        }
                    });

                    document.getElementById('total-calories').textContent = totalDailyCalories.toFixed(0);
                    document.getElementById('recommendedFoods').innerHTML = mealsHTML;

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    addFoodButtonListeners();
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    addDeleteFoodListeners();
                    showRecommendationButton();

                } else {
                    document.getElementById('recommendedFoods').innerHTML = `<div class="error-message"><p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ</p></div>`;
                }
            } catch (error) {
                console.error('Error fetching recommendations:', error);
                document.getElementById('recommendedFoods').innerHTML = `<div class="error-message"><p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}</p></div>`;
            }
        }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        function hideRecommendationButton() {
            const recommendationButton = document.querySelector('.get-recommendations-btn');
            if (recommendationButton) {
                recommendationButton.style.display = 'none';
            }
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        function showRecommendationButton() {
            const recommendationButton = document.querySelector('.get-recommendations-btn');
            if (recommendationButton) {
                recommendationButton.style.display = 'block';
            }
        }
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function addDeleteFoodListeners() {
            const deleteButtons = document.querySelectorAll('.delete-food-btn');
            
            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const foodCard = this.closest('.food-card');
                    const mealBody = foodCard.parentElement;
                    const mealSection = mealBody.closest('.meal-section');
                    const mealType = mealSection.getAttribute('data-meal-type');
                    
                    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
                    const foodCalories = parseFloat(foodCard.getAttribute('data-calories')) || 0;
                    
                    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å UI
                    mealBody.removeChild(foodCard);
                    
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ
                    updateMealCalories(mealSection, -foodCalories);
                    
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    updateTotalCalories();
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if (mealBody.children.length === 0) {
                        mealBody.innerHTML = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£';
                        mealBody.classList.add('empty-meal');
                        
                        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
                        const mealCalories = mealSection.querySelector('.meal-calories');
                        if (mealCalories) {
                            mealCalories.textContent = '0 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ';
                        }
                    }
                    
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                    saveMealToServer(mealType, Array.from(mealBody.querySelectorAll('.food-card')).map(card => {
                        return {
                            food_id: card.getAttribute('data-food-id'),
                            food_name: card.querySelector('.food-name').textContent,
                            calories: parseFloat(card.getAttribute('data-calories')),
                            protein: card.querySelector('.food-nutrients').textContent.match(/ü•©\s*(\d+(\.\d+)?)/)[1],
                            carbohydrate: card.querySelector('.food-nutrients').textContent.match(/üçû\s*(\d+(\.\d+)?)/)[1],
                            amount: card.querySelector('.food-amount').textContent,
                            image_url: card.querySelector('.food-image').src
                        };
                    }));
                });
            });
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function updateMealCalories(mealSection, caloriesChange) {
            const mealCaloriesElement = mealSection.querySelector('.meal-calories');
            if (mealCaloriesElement) {
                const currentCalories = parseFloat(mealCaloriesElement.textContent) || 0;
                const newCalories = Math.max(0, currentCalories + caloriesChange);
                mealCaloriesElement.textContent = `${newCalories.toFixed(0)} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ`;
            }
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        function updateTotalCalories() {
            let totalDailyCalories = 0;
            const mealCaloriesElements = document.querySelectorAll('.meal-calories');
            
            // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
            mealCaloriesElements.forEach(element => {
                const caloriesText = element.textContent;
                const calories = parseFloat(caloriesText) || 0;
                totalDailyCalories += calories;
            });
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô UI
            const totalCaloriesElement = document.getElementById('total-calories');
            if (totalCaloriesElement) {
                totalCaloriesElement.textContent = totalDailyCalories.toFixed(0);
            }
        }

// ========================================================================================================================
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function addFoodButtonListeners() {
            const addFoodButtons = document.querySelectorAll('.add-food-btn');
            
            addFoodButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const mealType = this.getAttribute('data-meal-type');
                    showFoodSelectionPopup(mealType);
                });
            });
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        async function showFoodSelectionPopup(mealType) {
            try {
                // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage
                localStorage.setItem('loggedInUsername', loggedInUser);
                const username = localStorage.getItem('loggedInUsername');
                
                if (!username) {
                    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
                    return;
                }

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á overlay ‡πÅ‡∏•‡∏∞ popup container
                const overlay = document.createElement('div');
                overlay.className = 'popup-overlay';

                const popup = document.createElement('div');
                popup.className = 'food-selection-popup';

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
                const mealTranslation = {
                    'breakfast': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤',
                    'lunch': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
                    'dinner': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô'
                };

                popup.innerHTML = `
                    <div class="popup-header">
                        <h3>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${mealTranslation[mealType]}</h3>
                        <button class="close-popup-btn"><i class="fa-solid fa-rectangle-xmark"></i></button>
                    </div>
                    <div class="popup-search">
                        <input type="text" id="food-search" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£...">
                    </div>
                    <div class="popup-content">
                        <div class="food-loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£...</div>
                    </div>
                    <div class="popup-footer">
                        <select class="options-food">
                            <option value="suitable">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</option>
                            <option value="unsuitable">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</option>    
                        </select>
                        <group class="btn-group">
                            <button class="submit-food-btn">‡πÄ‡∏û‡∏¥‡πà‡∏° <span class="selected-count">(0)</span></button>
                            <button class="cancel-food-btn">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                        </group>
                    </div>
                `;

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° popup ‡πÑ‡∏õ‡∏¢‡∏±‡∏á DOM
                overlay.appendChild(popup);
                document.body.appendChild(overlay);

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                const closeBtn = popup.querySelector('.close-popup-btn');
                const cancelBtn = popup.querySelector('.cancel-food-btn');
                const searchInput = popup.querySelector('#food-search');
                const submitBtn = popup.querySelector('.submit-food-btn');
                const foodOptionsSelect = popup.querySelector('.options-food');
                const popupContent = popup.querySelector('.popup-content');
                
                closeBtn.addEventListener('click', () => document.body.removeChild(overlay));
                cancelBtn.addEventListener('click', () => document.body.removeChild(overlay));

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                const selectedFoods = [];

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° (submit)
                submitBtn.addEventListener('click', () => {
                    if (selectedFoods.length > 0) {
                        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                        addSelectedFoodsToMeal(selectedFoods, mealType);
                    }
                    document.body.removeChild(overlay);
                });
                
                let currentFoodType = 'suitable'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                let allFetchedFoods = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á

                // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                async function loadAndRenderFoods(type) {
                    currentFoodType = type;
                    popupContent.innerHTML = '<div class="food-loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£...</div>'; // ‡πÄ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    allFetchedFoods = []; // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤

                    let apiUrl = 'http://localhost:5000/get_food_list'; // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    if (type === 'unsuitable') {
                        apiUrl = 'http://localhost:5000/get_unsuitable_food_list'; // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    }
                
                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ username: username }) // ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ
                        });

                        if (response.ok) {
                            const foodData = await response.json();
                            console.log(`Data for ${type} food:`, foodData);
                            if (foodData && Array.isArray(foodData.meals)) {
                                allFetchedFoods = foodData.meals;
                            } else {
                                console.error(`Invalid data structure for ${type} food:`, foodData);
                                allFetchedFoods = [];
                            }
                            renderMealSet({ meals: allFetchedFoods }, popupContent, mealType, selectedFoods, popup);
                        } else {
                            popupContent.innerHTML = `<div class="error-message">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (${type}) ‡πÑ‡∏î‡πâ</div>`;
                            allFetchedFoods = [];
                        }
                    } catch (error) {
                        console.error(`Error fetching ${type} foods:`, error);
                        popupContent.innerHTML = `<div class="error-message">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (${type})</div>`;
                        allFetchedFoods = [];
                    }
                }

                // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                loadAndRenderFoods(currentFoodType);

                // ‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞/‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞
                foodOptionsSelect.addEventListener('change', (event) => {
                    selectedFoods.length = 0; // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    updateSelectedCount(0, popup); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    searchInput.value = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    loadAndRenderFoods(event.target.value);
                });

                // ‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                searchInput.addEventListener('input', () => {
                    const searchTerm = searchInput.value.toLowerCase();
                    const filteredData = {
                        meals: allFetchedFoods.filter(meal =>
                            meal.food_name.toLowerCase().includes(searchTerm)
                        )
                    };
                    renderMealSet(filteredData, popupContent, mealType, selectedFoods, popup);
                });

            } catch (error) {
                console.error('Error showing food popup:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
            }
        }

// ========================================================================================================================
        function renderMealSet(foodData, container, mealType, selectedFoods, popup) {
            const mealTranslation = {
                'breakfast': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤',
                'lunch': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
                'dinner': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô'
            };

            container.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡πà‡∏≤

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ meals ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const meals = foodData.meals;
            if (!Array.isArray(meals) || meals.length === 0) {
                const noFoodMessage = document.createElement('div');
                noFoodMessage.classList.add('no-foods');
                noFoodMessage.innerText = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°';
                container.appendChild(noFoodMessage);
                return;
            }

            const categoryContainer = document.createElement('div');
            categoryContainer.classList.add('meal-category');

            let mealItemsHTML = '';  // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£

            meals.forEach(meal => {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const isSelected = selectedFoods.some(food => food.food_id === meal.food_id);
                const addBtnClass = isSelected ? 'add-food selected' : 'add-food';
                const addBtnIcon = isSelected ? 'fa-check' : 'fa-plus';

                mealItemsHTML += `
                    <div class="food-card" data-food-id="${meal.food_id}">
                        <button class="${addBtnClass}" data-food-id="${meal.food_id}"><i class="fa-solid ${addBtnIcon}"></i></button>
                        <img src="${meal.image_url || 'default-image.jpg'}" class="food-image" alt="${meal.food_name}">
                        <div class="food-info">
                            <h4 class="food-name">${meal.food_name}</h4>
                            <p class="food-calories">${meal.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</p>
                            <p class="food-nutrients">
                                üî• ${meal.calories} | ü•© ${meal.protein}g | üçû ${meal.carbohydrate}g 
                            </p>
                            <div class="food-actions">
                                <span class="food-name">${meal.food_name}</span>
                                <span class="food-amount">${meal.amount}</span>
                            </div>
                        </div>
                    </div>
                `;
            });

            categoryContainer.innerHTML += mealItemsHTML;  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡∏á‡πÉ‡∏ô category
            container.appendChild(categoryContainer);

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° add-food
            const addFoodBtns = container.querySelectorAll('.add-food');
            addFoodBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const foodId = this.getAttribute('data-food-id');
                    const foodCard = this.closest('.food-card');
                    
                    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                    const foodName = foodCard.querySelector('.food-name').textContent;
                    const calories = parseFloat(foodCard.querySelector('.food-calories').textContent);
                    const foodNutrients = foodCard.querySelector('.food-nutrients').textContent;
                    const foodAmount = foodCard.querySelector('.food-amount') ? foodCard.querySelector('.food-amount').textContent : '1 ‡∏à‡∏≤‡∏ô';
                    const imageUrl = foodCard.querySelector('.food-image').src;
                    
                    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏à‡∏≤‡∏Å foodNutrients
                    const proteinMatch = foodNutrients.match(/ü•©\s*(\d+(\.\d+)?)/);
                    const carbMatch = foodNutrients.match(/üçû\s*(\d+(\.\d+)?)/);
                    
                    const protein = proteinMatch ? proteinMatch[1] : '0';
                    const carbohydrate = carbMatch ? carbMatch[1] : '0';
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    const existingIndex = selectedFoods.findIndex(food => food.food_id === foodId);
                    
                    if (existingIndex >= 0) {
                        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                        selectedFoods.splice(existingIndex, 1);
                        this.classList.remove('selected');
                        this.innerHTML = '<i class="fa-solid fa-plus"></i>';
                    } else {
                        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                        selectedFoods.push({
                            food_id: foodId,
                            food_name: foodName,
                            calories: calories,
                            protein: protein,
                            carbohydrate: carbohydrate,
                            amount: foodAmount,
                            image_url: imageUrl
                        });
                        this.classList.add('selected');
                        this.innerHTML = '<i class="fa-solid fa-check"></i>';
                    }
                    
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°"
                    updateSelectedCount(selectedFoods.length, popup);
                });
            });
        }

// ========================================================================================================================
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°"
        function updateSelectedCount(count, popup) {
            const countElement = popup.querySelector('.selected-count');
            countElement.textContent = `(${count})`;
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            const submitBtn = popup.querySelector('.submit-food-btn');
            if (count > 0) {
                submitBtn.classList.add('has-items');
            } else {
                submitBtn.classList.remove('has-items');
            }
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        function addSelectedFoodsToMeal(selectedFoods, mealType) {
            // ‡∏´‡∏≤ meal-section ‡∏ó‡∏µ‡πà‡∏°‡∏µ data-meal-type ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö mealType
            const mealSection = document.querySelector(`.meal-section[data-meal-type="${mealType}"]`);
            if (!mealSection) {
                console.error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ${mealType} ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å`);
                return;
            }

            // ‡∏´‡∏≤ meal-body ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô meal-section
            const mealBody = mealSection.querySelector('.meal-body');
            if (!mealBody) {
                console.error(`‡πÑ‡∏°‡πà‡∏û‡∏ö meal-body ‡πÉ‡∏ô ${mealType}`);
                return;
            }

            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (mealBody.classList.contains('empty-meal')) {
                mealBody.innerHTML = '';
                mealBody.classList.remove('empty-meal');
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á meal-body
            let totalMealCalories = 0;
            selectedFoods.forEach(food => {
                const foodElement = document.createElement('div');
                foodElement.className = 'food-card';
                foodElement.setAttribute('data-food-id', food.food_id);
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° data-calories ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö
                foodElement.setAttribute('data-calories', food.calories);

                foodElement.innerHTML = `
                    <button class="delete-food-btn"><i class="fa-solid fa-trash"></i></button>
                    <img src="${food.image_url}" class="food-image" alt="${food.food_name}">
                    <div class="food-info">
                        <h4 class="food-name">${food.food_name}</h4>
                        <p class="food-calories">${food.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ</p>
                        <p class="food-nutrients">
                            üî• ${food.calories} | ü•© ${food.protein}g | üçû ${food.carbohydrate}g 
                        </p>
                        <div class="food-actions">
                            <span class="food-name">${food.food_name}</span>
                            <span class="food-amount">${food.amount}</span>
                        </div>
                    </div>
                `;

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
                const deleteBtn = foodElement.querySelector('.delete-food-btn');
                deleteBtn.addEventListener('click', function() {
                    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö
                    const foodCalories = parseFloat(foodElement.getAttribute('data-calories')) || 0;
                    
                    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å UI
                    mealBody.removeChild(foodElement);
                    
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ
                    updateMealCalories(mealSection, -foodCalories);
                    
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    updateTotalCalories();
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if (mealBody.children.length === 0) {
                        mealBody.innerHTML = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£';
                        mealBody.classList.add('empty-meal');
                        
                        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
                        const mealCalories = mealSection.querySelector('.meal-calories');
                        if (mealCalories) {
                            mealCalories.textContent = '0 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ';
                        }
                    }
                    
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á server (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
                    saveMealToServer(mealType, getMealFoodData(mealBody));
                });

                mealBody.appendChild(foodElement);
                totalMealCalories += parseFloat(food.calories);
            });

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ
            updateMealCalories(mealSection, totalMealCalories);

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            updateTotalCalories();
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á localStorage (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà API
            saveMealToServer(mealType, selectedFoods);
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        function updateMealCalories(mealSection, caloriesChange) {
            const mealCaloriesElement = mealSection.querySelector('.meal-calories');
            if (mealCaloriesElement) {
                // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                const currentCaloriesText = mealCaloriesElement.textContent;
                const currentCalories = parseFloat(currentCaloriesText) || 0;
                const newTotalCalories = Math.max(0, currentCalories + caloriesChange);
                mealCaloriesElement.textContent = `${newTotalCalories.toFixed(0)} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ`;
            }
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        function updateTotalCalories() {
            let totalDailyCalories = 0;
            const mealCaloriesElements = document.querySelectorAll('.meal-calories');
            
            mealCaloriesElements.forEach(element => {
                const caloriesText = element.textContent;
                // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ"
                const calories = parseFloat(caloriesText) || 0;
                totalDailyCalories += calories;
            });
            
            const totalCaloriesElement = document.getElementById('total-calories');
            if (totalCaloriesElement) {
                totalCaloriesElement.textContent = totalDailyCalories.toFixed(0);
            }
        }

        
        function addFoodButtonListeners() {
            const addFoodButtons = document.querySelectorAll('.add-food-btn');
            addFoodButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const mealType = this.getAttribute('data-meal-type');
                    showFoodSelectionPopup(mealType);
                });
            });
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        const style = document.createElement('style');
        style.textContent = `
            .add-food.selected {
                background-color: #4CAF50;
                color: white;
            }
            
            .submit-food-btn.has-items {
                background-color: #4CAF50;
                color: white;
            }
            
            .selected-count {
                font-weight: bold;
            }
        `;
        document.head.appendChild(style);

        document.addEventListener('DOMContentLoaded', function() {
            addFoodButtonListeners();
        });
        
// ========================================================================================================================
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏£‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelector(".submit-btn").addEventListener("click", function () {
                saveMeals();
            });
        });

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î currentWeekStart ‡∏ô‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô renderWeek ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î currentWeekStart ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        let currentWeekStart = new Date();
        currentWeekStart.setDate(currentWeekStart.getDate() - currentWeekStart.getDay()); // Start from Sunday

        function saveMeals() {
            const username = loggedInUser;
            const selectedDateElement = document.querySelector('.date.selected-day');
            let date;
            if (selectedDateElement) {
                date = selectedDateElement.getAttribute('data-date');
                console.log("Selected Date:", date);
            } else {
                date = new Date().toISOString().split("T")[0];
                console.log("Default Date (Today):", date);
            }
            const mealsData = collectMealData();

            if (!mealsData || Object.keys(mealsData).length === 0) {
                alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π!");
                return;
            }

            checkSavedMeals(username, date)
                .then(hasSavedMeals => {
                    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á api ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    let apiUrl = 'http://127.0.0.1:5000/save_meals';
                    if (hasSavedMeals) {
                        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏õ api ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
                        apiUrl = 'http://127.0.0.1:5000/update_meals';
                    }
                    fetch(apiUrl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            username: username,
                            date: date,
                            meals: mealsData
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                            // window.location.reload();
                        } else {
                            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.error);
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                    });
                })
                .catch(error => {
                    console.error('Error checking saved meals:', error);
                    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                });
        }
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        function collectMealData() {
            let meals = {};
            document.querySelectorAll(".meal-section").forEach(mealElement => {
                let mealType = mealElement.dataset.mealType; // ‡πÄ‡∏ä‡πà‡∏ô breakfast, lunch, dinner
                let foods = [];

                mealElement.querySelectorAll(".food-card").forEach(foodElement => {
                    let foodData = {
                        food_id: foodElement.dataset.foodId || null, 
                        food_name: foodElement.querySelector(".food-name").textContent,
                        calories: parseFloat(foodElement.dataset.calories) || 0,
                        protein: parseFloat(foodElement.querySelector(".food-nutrients").textContent.match(/ü•©\s*(\d+(\.\d+)?)/)[1]) || 0,
                        carbohydrate: parseFloat(foodElement.querySelector(".food-nutrients").textContent.match(/üçû\s*(\d+(\.\d+)?)/)[1]) || 0,
                        amount: foodElement.querySelector(".food-amount").textContent || "1 ‡∏à‡∏≤‡∏ô",
                        image_url: foodElement.querySelector(".food-image").src
                    };
                    foods.push(foodData);
                });

                if (foods.length > 0) {
                    meals[mealType] = foods;
                }
            });

            return meals;
        }

        



    
    </script>

</body>
</html>